set -RAM 0
set MATRIX 5
set INTER 4

set + 0
set << 1
set >> 2
set == 3

set & 5

var ply1_pos
var ply2_pos
var ballx
var bally
var balld
var buff1
var buff2

var _func_parameter1
var _func_parameter2
var _func_jumplsb
var _func_jumpmsb

###var banane fruit






#ALUminium V1.0 operations
set ~ 0x05
set <= 0x0F
#set + 0x00

set ZERO 0

var output
var index

affect $index 0
affect $output 0

do $index <= 10         #loop check
if _result              #index is smaller than 10
    do $output ~ ZERO   #inverting all the write bus 1
    write 1 _result
    
    do $index + 1       #index incrementation
    affect $index _result
else                    #end of loop
    restart             #restart the program
end










tick long 1

label RESTART
#set & 2
affect $ply1_pos 0x80
affect $ply2_pos 0x80
affect $ballx 0x04
affect $bally:global 0x08
affect $balld:global 0

# BUSW1 0 : CLK
# BUSW1 1 : CS
# BUSW2 0 : data
# _func_parameter1 : address
# _func_parameter2 : data

restart

###tick

###function Test 0x2114

###end



function Send
	# Temporisation
	do 0x80 & $_func_parameter1
	choose P MATRIX
	
	# ADDRESS
	label INFUNCTION_SEND:Boucle_address
	write 2 0
	write 1 0x00
	if _result
		write 2 1
	end
	clock 1
	write 1 0x01
	clock 1
	choose OP >>
	if _result
		#brut OPERATION_RESULT|NOOP_B1|OPLW
		#brut NULL
		choose OP &
		jump INFUNCTION_SEND:Boucle_address
	end

	do 0x80 & $_func_parameter2
	choose P MATRIX
	# DATA
	label INFUNCTION_SEND:Boucle_data
	write 2 0
	write 1 0x00
	if _result
		write 2 1
	end
	clock 1
	write 1 0x01
	clock 1
	choose OP >>
	if _result
		#brut OPERATION_RESULT|NOOP_B1|OPLW
		#brut NULL
		choose OP &
		jump INFUNCTION_SEND:Boucle_data
	end

	write 1 0x03
	write 1 0x02
	clock 1
end

#INIT MATRIX
choose P MATRIX

affect $_func_parameter1 0x0C
affect $_func_parameter2 0x01

call Send

affect $_func_parameter1 0x09
affect $_func_parameter2 0x00

call Send

affect $_func_parameter1 0x0A
affect $_func_parameter2 0x02

call Send

affect $_func_parameter1 0x0B
affect $_func_parameter2 0x07

call Send

affect $_func_parameter1 1
affect $_func_parameter2 0x7E
call Send
affect $_func_parameter1 2
affect $_func_parameter2 0x80
call Send
affect $_func_parameter1 3
affect $_func_parameter2 0x80
call Send
affect $_func_parameter1 4
affect $_func_parameter2 0x9E
call Send
affect $_func_parameter1 5
affect $_func_parameter2 0x81
call Send
affect $_func_parameter1 6
affect $_func_parameter2 0x81
call Send
affect $_func_parameter1 7
affect $_func_parameter2 0x81
call Send
affect $_func_parameter1 8
affect $_func_parameter2 0x7E
call Send

label MAIN

#CODE DE L'UPDATE

# On check les interupteurs
choose P INTER
# J1_DOWN 0x01
do _bread1 & 0x01
if _result
	do $ply1_pos == 0x02
	if_not _result
		do $ply1_pos >> 1
		affect $ply1_pos _result
	end
end
choose P INTER
# J1_UP 0x02
do _bread1 & 0x02
if _result
	do $ply1_pos == 0x80
	if_not _result
		do $ply1_pos << 1
		affect $ply1_pos _result
	end
end
choose P INTER
# J2_DOWN 0x10
do _bread1 & 0x10
if _result
	do $ply2_pos == 0x02
	if_not _result
		do $ply2_pos >> 1
		affect $ply2_pos _result
	end
end
choose P INTER
# J2_UP 0x20
do _bread1 & 0x20
if _result
	do $ply2_pos == 0x80
	if_not _result
		do $ply2_pos << 1
		affect $ply2_pos _result
	end
end









#BALLE
#0:HG 1:BG 2:DH 3:DB
do $balld == 0
if _result
	do $bally << 1
	affect $buff1 _result
	do $ballx << 1
	affect $buff2 _result

	do $buff1 == 0x80
	if _result
		affect $balld 1
	end
	if_not _result
		do $buff2 == 0x80
		if _result
			do $ply1_pos == $buff1
			if _result
				affect $balld 2
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
			do $ply1_pos >> 1
			do _result == $buff1
			if _result
				affect $balld 2
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
		end
	end
	
	do $buff1 + 0
	affect $bally _result
	do $buff2 + 0
	affect $ballx _result
end
do $balld == 1
if _result
	do $bally >> 1
	affect $buff1 _result
	do $ballx << 1
	affect $buff2 _result

	do $buff1 == 0x01
	if _result
		affect $balld 0
		do $buff2 == 0x80
		if _result
			do $bally + 0
			affect $buff1 _result
			do $ballx + 0
			affect $buff2 _result
			
			do 1 == 1
		end
	end
	if_not _result
		do $buff2 == 0x80
		if _result
			do $ply1_pos == $buff1
			if _result
				affect $balld 3
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
			do $ply1_pos >> 1
			do _result == $buff1
			if _result
				affect $balld 3
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
		end
	end
	
	do $buff1 + 0
	affect $bally _result
	do $buff2 + 0
	affect $ballx _result
end
do $balld == 2
if _result
	do $bally << 1
	affect $buff1 _result
	do $ballx >> 1
	affect $buff2 _result

	do $buff1 == 0x80
	if _result
		affect $balld 3
	end
	if_not _result
		do $buff2 == 0x01
		if _result
			do $ply2_pos == $buff1
			if _result
				affect $balld 0
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
			do $ply2_pos >> 1
			do _result == $buff1
			if _result
				affect $balld 0
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
		end
	end
	
	do $buff1 + 0
	affect $bally _result
	do $buff2 + 0
	affect $ballx _result
end
do $balld == 3
if _result
	do $bally >> 1
	affect $buff1 _result
	do $ballx >> 1
	affect $buff2 _result

	do $buff1 == 0x01
	if _result
		affect $balld 2
	end
	if_not _result
		do $buff2 == 0x01
		if _result
			do $ply2_pos == $buff1
			if _result
				affect $balld 1
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
			do $ply2_pos >> 1
			do _result == $buff1
			if _result
				affect $balld 1
				do $bally + 0
				affect $buff1 _result
				do $ballx + 0
				affect $buff2 _result
			end
		end
	end
	
	do $buff1 + 0
	affect $bally _result
	do $buff2 + 0
	affect $ballx _result
end

#CODE DE L'AFFICHAGE

#1ere ligne
affect $_func_parameter1 1
affect $_func_parameter2 0

do $ply1_pos == 0x80
if _result
	do $_func_parameter2 + 0x80
	affect $_func_parameter2 _result
end
do $ply2_pos == 0x80
if _result
	do $_func_parameter2 + 0x01
	affect $_func_parameter2 _result
end
do $bally == 0x80
if _result
	do $_func_parameter2 + $ballx
	affect $_func_parameter2 _result
end

call Send

#Xeme ligne
affect $buff1 0x80
affect $buff2 0x40

affect $_func_parameter1 2

label BOUCLE_AFFICHAGE

affect $_func_parameter2 0

do $ply1_pos == $buff1
if _result
	do $_func_parameter2 + 0x80
	affect $_func_parameter2 _result
end
do $ply1_pos == $buff2
if _result
	do $_func_parameter2 + 0x80
	affect $_func_parameter2 _result
end
do $ply2_pos == $buff1
if _result
	do $_func_parameter2 + 0x01
	affect $_func_parameter2 _result
end
do $ply2_pos == $buff2
if _result
	do $_func_parameter2 + 0x01
	affect $_func_parameter2 _result
end
do $bally == $buff2
if _result
	do $_func_parameter2 + $ballx
	affect $_func_parameter2 _result
end

call Send

do $_func_parameter1 + 1
affect $_func_parameter1 _result
do $buff1 >> 1
affect $buff1 _result
do $buff2 >> 1
affect $buff2 _result

do $_func_parameter1 == 9
if_not _result
	jump BOUCLE_AFFICHAGE
end

do $ballx == 0
if _result
	jump RESTART
end

jump MAIN